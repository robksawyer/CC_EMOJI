package  {	import flash.display.MovieClip;	import flash.display.BitmapData;	import flash.display.Bitmap;	import flash.display.StageAlign;	import flash.display.StageScaleMode;		import flash.display.Loader;	import flash.events.Event;	import flash.events.IEventDispatcher;	import flash.events.ProgressEvent;	import flash.events.SecurityErrorEvent;	import flash.events.HTTPStatusEvent;	import flash.events.IOErrorEvent;	import flash.net.URLRequest;		import flash.utils.getDefinitionByName;	import flash.utils.getQualifiedClassName;		//Logging	import com.demonsters.debugger.MonsterDebugger;		//import the Resolume communication classes	//make sure you have added the source path to these files in the ActionScript 3 Preferences of Flash	import resolumeCom.*;	import resolumeCom.parameters.*;	import resolumeCom.events.*;		public class EMOJI extends MovieClip 	{			/*****************PRIVATE********************/		/**		* Create the resolume object that will do all the hard work for you.		*/		private var resolume:Resolume = new Resolume();				/**		* Examples of parameters that can be used inside of Resolume		*/		/*private var paramScaleX:FloatParameter = resolume.addFloatParameter("Scale X", 0.5);		private var paramScaleY:FloatParameter = resolume.addFloatParameter("Scale Y", 0.5);		private var paramRotate:FloatParameter = resolume.addFloatParameter("Rotate", 0.0);		private var paramFooter:StringParameter = resolume.addStringParameter("Footer", "VJ BOB");		private var paramShowBackground:BooleanParameter = resolume.addBooleanParameter("Background", true);		private var paramShowSurprise:EventParameter = resolume.addEventParameter("Surprise!");*/				private emojisToInclude = new Array(43,44);			private var emojis:Object = new Object();		emojis.sizes = new Array("48x48","64x64","96x96");		emojis.total = new Number(10); //The total number of emojis (1363)					public function EMOJI():void		{						// Start the MonsterDebugger			MonsterDebugger.initialize(this);				//set callback, this will notify us when a parameter has changed			resolume.addParameterListener(parameterChanged);						//Initialize the Resolume parameters			initParams();						addEventListener(Event.ADDED_TO_STAGE, init);		}				/**			* Initialize parameters that are used inside of Resolume		*/		public function initParams(e:Event):void		{			MonsterDebugger(this, "Iniailizing Resolume parameters.");						//create a new array to hold the resolume parameters			emojis.params = new Array();						//Booleans			for(var i=0;i<emojisToInclude.length;i++)			{				emojis.params[i] = resolume.addBooleanParameter("paramEmoji" + emojisToInclude[i], false);			}		}			/**			* Main initialize method		*/		public function init(e:Event):void		{			MonsterDebugger.trace(this, "EMOJI Initialized");						//Initialize all of the emojis			emojis.bitmapdata = new Array(); //Holds the BitmapData version			emojis.bitmap = new Array(); //Holds the Bitmap version						//TODO: Make a for loop and populate these			/*			* TODO: I wish I could get this to work.			* See: http://stackoverflow.com/questions/4103641/working-with-swcs-getdefinitionbyname-issue			* http://stackoverflow.com/questions/1023205/as3-embed-or-import-all-classes-in-an-external-swf-without-referencing-each-clas			*/			/*for(var j = 0; j < emojis.sizes.length; j++){				//Create an array for the different sized emojis				emojis.bitmapdata[j] = new Array();				emojis.bitmap[j] = new Array();								for(var i = 1; i < emojis.total; i++){					("Emoji_" + emojis.sizes[j] + "_" + i);					var ClassReference:Class = new (getDefinitionByName("Emoji_" + emojis.sizes[j] + "_" + i) as Class)();										MonsterDebugger.trace(this, ClassReference.toString());					MonsterDebugger.trace(this, "Emoji_"+emojis.sizes[0]+"_"+i);					//emojis.bitmapdata[j][i] = new dynClass(); 					//MonsterDebugger.trace(this, emojis.bitmapdata[j][i].toString());					//emojis.bitmap[j][i] = new Bitmap(emojis.bitmapdata[i]); 				}			}*/									//Hanlde the emojis that should be added to the plugin			emojis.bitmapdata['48x48'] = new Array();			emojis.bitmapdata['48x48'][0] = new Emoji_48x48_43();			emojis.bitmapdata['48x48'][1] = new Emoji_48x48_44();									//emojis.bitmapdata[96] = new Emoji_96x96_96(); 			//emojis.bitmap[96] = new Bitmap(emojis.bitmapdata[96]); 		}			/**		* This method will be called everytime you change a paramater in Resolume.		*/		public function parameterChanged( event:ChangeEvent ):void 		{			switch(event.object)			{				case this.paramEmoji43:					handleState(this.paramEmoji43, emojis.bitmap[43]);					break;									case this.paramEmoji44:					handleState(this.paramEmoji44, emojis.bitmap[44]);					break;								default:					MonsterDebugger.trace(this, event.object);					break;			}		}				/**		* Handle the parameter state		*/		public function handleBooleanState(paramOption:BooleanParameter, emoji: Bitmap):void		{			if(paramOption.getValue() == 0)			{				stageCheckRemoval(emoji);			}			else			{				stageCheckAdd(emoji);			}		}				/**			* Check to see if the emoji should be removed from the stage.		*/		public function stageCheckRemoval(emoji: Bitmap):void		{			if(emoji.stage)			{				MonsterDebugger.trace(this, emoji.name + " is in display list");				emoji.parent.removeChild(emoji);  //remove emoji84 from display list				emoji = null //remove reference to the emoji84, mark it for garbage collection			}			else			{				MonsterDebugger.trace(this, emoji.name + " isn't in display list");			}		}				/**			* Check to see if the emoji should be added to the stage.		*/		public function stageCheckAdd(emoji: Bitmap):void		{			if(emoji.stage)			{				MonsterDebugger.trace(this, emoji.name + " is already in display list");			}			else			{				MonsterDebugger.trace(this, emoji.name + " isn't in display list");				emoji.x = stage.stageWidth/2 - emoji.width/2;				emoji.y = stage.stageHeight/2 - emoji.height/2;				addChild(emoji);			}		}	}}