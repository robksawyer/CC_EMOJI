package  {	import flash.display.MovieClip;	import flash.display.BitmapData;	import flash.display.Bitmap;	import flash.display.StageAlign;	import flash.display.StageScaleMode;		import flash.display.Loader;	import flash.events.Event;	import flash.events.IEventDispatcher;	import flash.events.ProgressEvent;	import flash.events.SecurityErrorEvent;	import flash.events.HTTPStatusEvent;	import flash.events.IOErrorEvent;	import flash.net.URLRequest;		//Logging	import com.demonsters.debugger.MonsterDebugger;		//import the Resolume communication classes	//make sure you have added the source path to these files in the ActionScript 3 Preferences of Flash	import resolumeCom.*;	import resolumeCom.parameters.*;	import resolumeCom.events.*;		public class EMOJI extends MovieClip 	{			/*****************PRIVATE********************/		/**		* Create the resolume object that will do all the hard work for you.		*/		private var resolume:Resolume = new Resolume();				/**		* Create as many different parameters as you like.		*/		/*private var paramScaleX:FloatParameter = resolume.addFloatParameter("Scale X", 0.5);		private var paramScaleY:FloatParameter = resolume.addFloatParameter("Scale Y", 0.5);		private var paramRotate:FloatParameter = resolume.addFloatParameter("Rotate", 0.0);		private var paramFooter:StringParameter = resolume.addStringParameter("Footer", "VJ BOB");		private var paramShowBackground:BooleanParameter = resolume.addBooleanParameter("Background", true);		private var paramShowSurprise:EventParameter = resolume.addEventParameter("Surprise!");*/				private var paramEmoji84:BooleanParameter = resolume.addBooleanParameter("paramEmoji84", true);		private var paramEmoji96:BooleanParameter = resolume.addBooleanParameter("paramEmoji96", false);			private var emojis:Object = new Object();				public function EMOJI():void		{						// Start the MonsterDebugger			MonsterDebugger.initialize(this);			MonsterDebugger.trace(this, "Hello World!");				//set callback, this will notify us when a parameter has changed			resolume.addParameterListener(parameterChanged);					addEventListener(Event.ADDED_TO_STAGE, init);		}			public function init(e:Event):void		{			MonsterDebugger.trace(this, "EMOJI Initialized");						//Initialize all of the emojis			emojis.bitmapdata = new Array(); //Holds the BitmapData version			emojis.bitmap = new Array(); //Holds the Bitmap version						//TODO: Make a for loop and populate these			emojis.bitmapdata[84] = new Emoji_96x96_84(); 			emojis.bitmap[84] = new Bitmap(emojis.bitmapdata[84]); 						emojis.bitmapdata[96] = new Emoji_96x96_96(); 			emojis.bitmap[96] = new Bitmap(emojis.bitmapdata[96]); 		}			/**		* This method will be called everytime you change a paramater in Resolume.		*/		public function parameterChanged( event:ChangeEvent ):void 		{			//check to see what paramater was changed			if (event.object == this.paramEmoji84) 			{								if(this.paramEmoji84.getValue() == 0)				{					stageCheckRemoval(emojis.bitmap[84]);				}				else				{					stageCheckAdd(emojis.bitmap[84]);				}							} 			else if (event.object == this.paramEmoji96) 			{								if(this.paramEmoji96.getValue() == 0)				{					stageCheckRemoval(emojis.bitmap[96]);				}				else				{					stageCheckAdd(emojis.bitmap[96]);				}							} 			/*else if (event.object == this.paramRotate) 			{								this.logo.rotation = this.paramRotate.getValue() * 360.0;							} 			else if (event.object == this.paramFooter) 			{								this.footer.text = this.paramFooter.getValue();							} 			else if (event.object == this.paramShowBackground) 			{								this.background.visible = this.paramShowBackground.getValue();							} 			else if (event.object == this.paramShowSurprise) 			{								if (this.paramShowSurprise.getValue())				{					this.surprise.gotoAndPlay(2);				}			}*/			else 			{				MonsterDebugger.trace(this, event.object);			}		}				public function stageCheckRemoval(emoji: Bitmap):void		{			if(emoji.stage)			{				MonsterDebugger.trace(this, emoji.name + " is in display list");				emoji.parent.removeChild(emoji);  //remove emoji84 from display list				emoji = null //remove reference to the emoji84, mark it for garbage collection			}			else			{				MonsterDebugger.trace(this, emoji.name + " isn't in display list");			}		}				public function stageCheckAdd(emoji: Bitmap):void		{			if(emoji.stage)			{				MonsterDebugger.trace(this, emoji.name + " is already in display list");			}			else			{				MonsterDebugger.trace(this, emoji.name + " isn't in display list");				emoji.x = stage.stageWidth/2 - emoji.width/2;				emoji.y = stage.stageHeight/2 - emoji.height/2;				addChild(emoji);			}		}	}}