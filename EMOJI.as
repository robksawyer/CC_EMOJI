package  {		import flash.display.MovieClip;		import flash.display.BitmapData;		import flash.display.Bitmap;		import flash.display.StageAlign;    	import flash.display.StageScaleMode;			import flash.display.Loader;		import flash.events.Event;		import flash.events.IEventDispatcher;		import flash.events.ProgressEvent;		import flash.events.SecurityErrorEvent;		import flash.events.HTTPStatusEvent;		import flash.events.IOErrorEvent;		import flash.net.URLRequest;				//Logging		import com.demonsters.debugger.MonsterDebugger;		//import the Resolume communication classes		//make sure you have added the source path to these files in the ActionScript 3 Preferences of Flash		import resolumeCom.*;		import resolumeCom.parameters.*;		import resolumeCom.events.*;		public class EMOJI extends MovieClip 		{				/*****************PRIVATE********************/				/**				* Create the resolume object that will do all the hard work for you.				*/				private var resolume:Resolume = new Resolume();								//private var loader:Loader = new Loader();								/**				* Create as many different parameters as you like.				*/				/*private var paramScaleX:FloatParameter = resolume.addFloatParameter("Scale X", 0.5);				private var paramScaleY:FloatParameter = resolume.addFloatParameter("Scale Y", 0.5);				private var paramRotate:FloatParameter = resolume.addFloatParameter("Rotate", 0.0);				private var paramFooter:StringParameter = resolume.addStringParameter("Footer", "VJ BOB");				private var paramShowBackground:BooleanParameter = resolume.addBooleanParameter("Background", true);				private var paramShowSurprise:EventParameter = resolume.addEventParameter("Surprise!");*/						public function EMOJI():void				{										// Start the MonsterDebugger					MonsterDebugger.initialize(this);					MonsterDebugger.trace(this, "Hello World!");								//set callback, this will notify us when a parameter has changed					resolume.addParameterListener(parameterChanged);									addEventListener(Event.ADDED_TO_STAGE, init);				}				public function init(e:Event):void				{					MonsterDebugger.trace(this, "EMOJI Initialized");					//configureListeners(loader.contentLoaderInfo);					//loader.load(new URLRequest("./images/40x40/113.png"));										var emoji1BM:BitmapData = new Emoji_96x96_1();					var emoji1:Bitmap = new Bitmap(emoji1BM);					emoji1.x = stage.stageWidth/2 - emoji1.width/2;					emoji1.y = stage.stageHeight/2 - emoji1.height/2;					addChild(emoji1);				}				/**				* This method will be called everytime you change a paramater in Resolume.				*/				public function parameterChanged( event:ChangeEvent ):void 				{					//check to see what paramater was changed					/*if (event.object == this.paramScaleX) {												//here you can do whatever you like with the value of the parameter						this.logo.scaleX = this.paramScaleX.getValue() * 2.0;											} else if (event.object == this.paramScaleY) {												this.logo.scaleY = this.paramScaleY.getValue() * 2.0;											} else if (event.object == this.paramRotate) {												this.logo.rotation = this.paramRotate.getValue() * 360.0;											} else if (event.object == this.paramFooter) {												this.footer.text = this.paramFooter.getValue();											} else if (event.object == this.paramShowBackground) {												this.background.visible = this.paramShowBackground.getValue();											} else if (event.object == this.paramShowSurprise) {												if (this.paramShowSurprise.getValue()){							this.surprise.gotoAndPlay(2);						}					} else {						MonsterDebugger.trace(this, event.object);					}*/				}								/**				DEPRECATED				*/								/*private function configureListeners(dispatcher:IEventDispatcher):void 				{					dispatcher.addEventListener(Event.COMPLETE, completeHandler);					dispatcher.addEventListener(Event.OPEN, openHandler);					dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);					dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);					dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);					dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);				}								private function completeHandler(event:Event):void 				{					MonsterDebugger.trace(this, "completeHandler: " + loader.content);					loader.content.x = stage.stageWidth/2 - loader.content.width/2;					loader.content.y = stage.stageHeight/2 - loader.content.height/2;					addChild(loader.content);									}						private function openHandler(event:Event):void 				{					MonsterDebugger.trace(this, "openHandler: " + event);				}						private function progressHandler(event:ProgressEvent):void 				{					MonsterDebugger.trace(this, "progressHandler loaded:" + event.bytesLoaded + " total: " + event.bytesTotal);				}						private function securityErrorHandler(event:SecurityErrorEvent):void 				{					MonsterDebugger.trace(this, "securityErrorHandler: " + event);				}						private function httpStatusHandler(event:HTTPStatusEvent):void 				{					MonsterDebugger.trace(this, "httpStatusHandler: " + event);				}						private function ioErrorHandler(event:IOErrorEvent):void 				{					MonsterDebugger.trace(this, "ioErrorHandler: " + event);				}*/		}}